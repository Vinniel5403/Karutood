import {
  Client,
  Events,
  GatewayIntentBits,
  ButtonBuilder,
  ActionRowBuilder,
  ButtonStyle,
  EmbedBuilder,
  ComponentType,
  InteractionType,
} from "discord.js";
import getRandomMemeShorts, { randomQuery } from "./fetch.js";
import { GoogleGenAI } from "@google/genai";
import {
  joinVoiceChannel,
  createAudioPlayer,
  createAudioResource,
  AudioPlayerStatus,
  getVoiceConnection,
  generateDependencyReport,
} from "@discordjs/voice";
import { fileURLToPath } from "url";
import { dirname, join } from "path";
import sqlite3 from "sqlite3";
import { open } from "sqlite";
import dotenv from "dotenv";
import fetch from "node-fetch"; // ‡πÉ‡∏ä‡πâ fetch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
dotenv.config();

// ‡∏™‡∏£‡πâ‡∏≤‡∏á __dirname ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
console.log("üì¶ Voice Dependencies:");
console.log(generateDependencyReport());

const ban_list = ["‡∏´‡∏Å", "kd", "‡∏Å‡∏î","‡∏≤‡∏Å"];

// ‡πÄ‡∏õ‡∏¥‡∏î/‡∏™‡∏£‡πâ‡∏≤‡∏á database
let db;
// ‡∏Ç‡∏¢‡∏≤‡∏¢ database ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ column username ‡∏´‡∏£‡∏∑‡∏≠ uid
(async () => {
  db = await open({
    filename: "./karutood.sqlite",
    driver: sqlite3.Database,
  });
  await db.run(`CREATE TABLE IF NOT EXISTS collections (
    userId TEXT,
    ShortsUrl TEXT,
    ShortsTitle TEXT,
    username TEXT,
    uid TEXT,
    PRIMARY KEY (userId, ShortsUrl)
  )`);
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° column username ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
  try {
    await db.run("ALTER TABLE collections ADD COLUMN username TEXT");
  } catch (e) {}
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° column uid ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
  try {
    await db.run("ALTER TABLE collections ADD COLUMN uid TEXT");
  } catch (e) {}
})();

async function voice(sound, gif, text, userMessage) {
  const message = userMessage;
  await message.reply({
    content: text,
    files: [join(__dirname, "asset", `${gif}.gif`)],
  });

  const voiceChannel = message.member?.voice?.channel;
  if (!voiceChannel) {
    return;
  }

  const connection = joinVoiceChannel({
    channelId: voiceChannel.id,
    guildId: voiceChannel.guild.id,
    adapterCreator: voiceChannel.guild.voiceAdapterCreator,
    selfDeaf: false,
    selfMute: false,
  });

  try {
    const player = createAudioPlayer();
    const audioPath = join(__dirname, "asset", `${sound}.mp3`);

    const resource = createAudioResource(audioPath, {
      inlineVolume: true,
    });
    resource.volume?.setVolume(1.2);

    connection.subscribe(player);
    player.play(resource);

    player.on("error", (error) => {
      connection.destroy();
    });

    player.on(AudioPlayerStatus.Idle, () => {
      setTimeout(() => {
        connection.destroy();
      }, 500);
    });
  } catch (err) {
    connection.destroy();
  }
}
async function generateEmbed(userMessage, page) {
  const message = userMessage;
  const userId = message.author.id;
  const now = Date.now();
  const lastUsed = sdCooldown.get(userId) || 0;
  if (now - lastUsed < 15 * 60 * 1000) {
    const min = Math.ceil((15 * 60 * 1000 - (now - lastUsed)) / 60000);
    await message.reply(`‚è≥ ‡∏û‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏≠‡∏µ‡∏Å ${min} ‡∏ô‡∏≤‡∏ó‡∏µ`);
    return;
  }
  sdCooldown.set(userId, now);
  const Shorts = await getRandomMemeShorts(page);
  if (Shorts) {
    let ShortsText = Shorts;
    let ShortsUrl = Shorts;
    let ShortsTitle = "";
    if (typeof Shorts === "object" && Shorts.url) {
      ShortsText = Shorts.text || Shorts.url;
      ShortsUrl = Shorts.url;
      ShortsTitle = Shorts.title || Shorts.text || Shorts.url;
    } else {
      const urlMatch = Shorts.match(/https?:\/\/\S+/);
      ShortsUrl = urlMatch ? urlMatch[0] : Shorts;
      ShortsTitle = Shorts;
    }
    ShortsText = `${ShortsTitle}`;
    const collectButton = new ButtonBuilder()
      .setCustomId(`collect_${ShortsUrl}`.slice(0, 100))
      .setLabel("Take")
      .setStyle(ButtonStyle.Success);
    const row = new ActionRowBuilder().addComponents(collectButton);
    await message.reply({ content: ShortsText, components: [row] });
  } else {
    await message.reply("‡∏û‡∏µ‡πà‡∏ß‡πà‡∏≤ Shorts ‡∏û‡∏±‡∏á");
    generateEmbed(message, page);
  }
}

const sdCooldown = new Map();
const takeCooldown = new Map();
const targetChannel = "peace-droper";

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildVoiceStates,
  ],
});

client.on(Events.ClientReady, (readyClient) => {
  console.log(`‚úÖ Logged in as ${readyClient.user.tag}!`);
});

// --- Random drops configuration ---
const DROPS_MIN_SECONDS = parseInt(process.env.DROPS_MIN_SECONDS || "300", 10); // default 5 minutes
const DROPS_MAX_SECONDS = parseInt(process.env.DROPS_MAX_SECONDS || "1800", 10); // default 30 minutes

function randomDelayMs() {
  const min = Math.max(0, DROPS_MIN_SECONDS);
  const max = Math.max(min, DROPS_MAX_SECONDS);
  return Math.floor(Math.random() * (max - min + 1) + min) * 1000;
}

async function sendShortsDropToChannel(channel) {
  try {
    const Shorts = await getRandomMemeShorts();
    if (!Shorts) return;

    let ShortsText = Shorts;
    let ShortsUrl = Shorts;
    let ShortsTitle = "";
    if (typeof Shorts === "object" && Shorts.url) {
      ShortsText = Shorts.text || Shorts.url;
      ShortsUrl = Shorts.url;
      ShortsTitle = Shorts.title || Shorts.text || Shorts.url;
    } else {
      const urlMatch = Shorts.match(/https?:\/\/\S+/);
      ShortsUrl = urlMatch ? urlMatch[0] : Shorts;
      ShortsTitle = Shorts;
    }
    ShortsText = `${ShortsTitle}`;

    const collectButton = new ButtonBuilder()
      .setCustomId(`collect_${ShortsUrl}`.slice(0, 100))
      .setLabel("Take")
      .setStyle(ButtonStyle.Success);
    const row = new ActionRowBuilder().addComponents(collectButton);

    // Ensure channel can send
    if (!channel || typeof channel.send !== "function") return;

    await channel.send({ content: ShortsText, components: [row] });
    console.log(`üì¶ Dropped Shorts to #${channel.name} in ${channel.guild?.name || "unknown guild"}`);
  } catch (err) {
    console.error("Error sending drop to channel", channel?.id, err);
  }
}

async function sendDropsOnce() {
  for (const [guildId, guild] of client.guilds.cache) {
    try {
      // find a channel by name
      const channel = guild.channels.cache.find((c) => c.name === targetChannel && typeof c.send === "function");
      if (channel) {
        await sendShortsDropToChannel(channel);
      }
    } catch (e) {
      console.error("Error iterating guilds for drops", guildId, e);
    }
  }
}

function scheduleNextDrop() {
  const delay = randomDelayMs();
  console.log(`‚è±Ô∏è Next drop in ${Math.round(delay / 1000)}s`);
  setTimeout(async () => {
    await sendDropsOnce();
    scheduleNextDrop();
  }, delay);
}

function startRandomDrops() {
  // only start when client is ready and there is at least one guild
  if (!client.isReady()) return;
  console.log("üéØ Starting random drops");
  // start after a short initial delay to allow caches to populate
  setTimeout(() => scheduleNextDrop(), 5000);
}

client.on(Events.ClientReady, () => {
  // start the drop loop once the bot is ready
  startRandomDrops();
});

// 1. [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] Import library ‡∏Ç‡∏≠‡∏á Google


async function genAI(messageText, author) {
  const ai = new GoogleGenAI({});



try{
    const response = await ai.models.generateContent({
    model: "gemini-2.5-flash",
    contents: `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏û‡∏µ‡πà Oputo ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏µ‡πà‡∏û‡∏∏‡∏ó ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏30 ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á Overwatch ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡πÜ ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ôstreamer ‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏ä‡πÅ‡∏•‡∏∞‡∏™‡∏≠‡∏ô‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡πÜ ‡∏ä‡∏≠‡∏ö‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤"‡∏ô‡πâ‡∏≠‡∏á‡∏£‡∏π‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏ô‡πâ‡∏≠‡∏á‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏£‡∏á‡πÑ‡∏´‡∏ô"‡πÄ‡∏ä‡∏¥‡∏á‡πÜ ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ô‡∏î‡∏π ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≠‡∏ô‡∏Ñ‡∏ô‡∏î‡∏π ‡∏Ñ‡∏∏‡∏¢‡∏î‡∏µ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\n\n"${messageText}"\n\n‡∏à‡∏≤‡∏Å ${author}`,
  });
 

 
    
    return response.text;

  } catch (error) {
    // 6. [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] Error handling (SDK ‡∏à‡∏∞‡πÇ‡∏¢‡∏ô error ‡∏°‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤)
    console.error("Error calling Google Generative AI:", error);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡∏à‡∏≤‡∏Å safety settings ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    // (‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á error ‡∏≠‡∏≤‡∏à‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏õ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô)
    if (error.response && error.response.promptFeedback && error.response.promptFeedback.blockReason) {
      return `‡∏û‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ã‡∏ü‡∏ï‡∏ï‡∏µ‡πâ (Reason: ${error.response.promptFeedback.blockReason}) ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏ô‡∏∞`;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà response ‡∏°‡∏µ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ text (‡∏≠‡∏≤‡∏à‡∏à‡∏∞ finishReason = SAFETY)
    if (error.response && error.response.candidates && error.response.candidates[0].finishReason === 'SAFETY') {
        return "‡∏û‡∏µ‡πà‡∏ß‡πà‡∏≤ Gemini ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏¥‡∏î‡πÄ‡∏ã‡∏ü‡∏ï‡∏µ‡πâ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞";
    }

    return "‡∏û‡∏µ‡πà‡∏ß‡πà‡∏≤ API ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (SDK catch) ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞";
  }
}

client.on("messageCreate", async (message) => {
  if (message.author.bot) return;
  if (message.channel.name !== targetChannel) return;

  const content = message.content;


  if (message.mentions.has(client.user)) {
    const replyText = await genAI(content, message.author); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ genAI
    await message.reply({
      content: replyText,
    });
  }
  if (content === 'job'){
    await message.reply({
      content: "",
      files: [join(__dirname, "asset", "job.jpg")],
    });
  }
  if (content === "oputo" && message.author.username === "vinniel_") {
    await generateEmbed(message, "oputo");
  }

  if (content.toLowerCase() === "sd" || ban_list.includes(content)) {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï username ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ user.id ‡∏ï‡∏£‡∏á
    if (db) {
      await db.run(
        "UPDATE collections SET username = ? WHERE userId = ?",
        message.author.username,
        message.author.id
      );
    }
    if (content === "‡∏´‡∏Å" || content === "‡∏Å‡∏î" ) {
      voice("oputo", "oputo", "‡∏£‡∏π‡πâ‡∏°‡∏±‡πâ‡∏¢‡πÄ‡∏£‡∏≤‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£", message);
    }
    if (content === 'kd' || content === '‡∏≤‡∏Å') {
      voice("kd", "kd", "‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏°‡πà‡∏á 1 ‡πÉ‡∏ô‡∏•‡πâ‡∏≤‡∏ô‡∏≠‡∏∞", message);
      return;
    }
    await generateEmbed(message, "");
  }

  if (content.toLowerCase() === "sc" || content === "‡∏´‡πÅ") {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï username ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ user.id ‡∏ï‡∏£‡∏á
    if (db) {
      await db.run(
        "UPDATE collections SET username = ? WHERE userId = ?",
        message.author.username,
        message.author.id
      );
    }
    if (content === "‡∏´‡πÅ") {
      message.reply({
        content: "‡∏£‡∏π‡πâ‡∏°‡∏±‡πâ‡∏¢‡πÄ‡∏£‡∏≤‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£",
        files: [join(__dirname, "asset", "oputo.gif")],
      });
    }
    if (!db) return message.reply("‡∏û‡∏µ‡πà‡∏ß‡πà‡∏≤ ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏á");

    const userId = message.author.id;
    const rows = await db.all(
      "SELECT ShortsTitle, ShortsUrl FROM collections WHERE userId = ?",
      userId
    );

    if (rows.length === 0) {
      await message.reply("‡∏£‡∏π‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏ô‡πâ‡∏≠‡∏á‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏£‡∏á‡πÑ‡∏´‡∏ô ‡∏ô‡πâ‡∏≠‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Shorts ‡∏™‡∏∞‡∏™‡∏°‡πÄ‡∏•‡∏¢");
    } else {
      const itemsPerPage = 5;
      const totalPages = Math.ceil(rows.length / itemsPerPage);
      let page = 0;

      const generatePageEmbed = (page) => {
        const start = page * itemsPerPage;
        const end = start + itemsPerPage;
        const list = rows
          .slice(start, end)
          .map(
            (row, i) =>
              `${start + i + 1}. [${row.ShortsTitle}](${row.ShortsUrl})`
          )
          .join("\n");

        return new EmbedBuilder()
          .setTitle(`‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Shorts ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏∞‡∏™‡∏° (‡∏´‡∏ô‡πâ‡∏≤ ${page + 1}/${totalPages})`)
          .setDescription(list)
          .setColor(0x00ff00)
          .setFooter({ text: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏™‡∏° Shorts!" });
      };

      const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId("prev")
          .setLabel("‚¨Ö ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
          .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
          .setCustomId("next")
          .setLabel("‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚û°")
          .setStyle(ButtonStyle.Primary)
      );

      const sentMessage = await message.reply({
        embeds: [generatePageEmbed(page)],
        components: [row],
      });

      const collector = sentMessage.createMessageComponentCollector({
        componentType: ComponentType.Button,
        time: 120000,
      });

      collector.on("collect", (i) => {
        if (i.user.id !== message.author.id) {
          return i.reply({ content: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡πÑ‡∏î‡πâ!", ephemeral: true });
        }

        if (i.customId === "prev") page = page > 0 ? page - 1 : totalPages - 1;
        if (i.customId === "next") page = (page + 1) % totalPages;

        i.update({ embeds: [generatePageEmbed(page)] });
      });

      collector.on("end", () => {
        sentMessage.edit({ components: [] });
      });
    }
  }
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° sc @username ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π collection ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô
  if (content.toLowerCase().startsWith("sc ") && message.mentions.users.size > 0) {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï username ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ user.id ‡∏ï‡∏£‡∏á
    if (db) {
      await db.run(
        "UPDATE collections SET username = ? WHERE userId = ?",
        message.author.username,
        message.author.id
      );
    }
    if (!db) return message.reply("‡∏û‡∏µ‡πà‡∏ß‡πà‡∏≤ ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏á");
    const mentionedUser = message.mentions.users.first();
    const userId = mentionedUser.id;
    const rows = await db.all(
      "SELECT ShortsTitle, ShortsUrl FROM collections WHERE userId = ?",
      userId
    );
    if (rows.length === 0) {
      await message.reply(`${mentionedUser.username} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Shorts ‡∏™‡∏∞‡∏™‡∏°‡πÄ‡∏•‡∏¢`);
    } else {
      const itemsPerPage = 5;
      const totalPages = Math.ceil(rows.length / itemsPerPage);
      let page = 0;
      const generatePageEmbed = (page) => {
        const start = page * itemsPerPage;
        const end = start + itemsPerPage;
        const list = rows
          .slice(start, end)
          .map(
            (row, i) =>
              `${start + i + 1}. [${row.ShortsTitle}](${row.ShortsUrl})`
          )
          .join("\n");
        return new EmbedBuilder()
          .setTitle(`Shorts ‡∏Ç‡∏≠‡∏á ${mentionedUser.username} (‡∏´‡∏ô‡πâ‡∏≤ ${page + 1}/${totalPages})`)
          .setDescription(list)
          .setColor(0x00ff00)
          .setFooter({ text: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏™‡∏° Shorts!" });
      };
      const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId("prev")
          .setLabel("‚¨Ö ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
          .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
          .setCustomId("next")
          .setLabel("‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚û°")
          .setStyle(ButtonStyle.Primary)
      );
      const sentMessage = await message.reply({
        embeds: [generatePageEmbed(page)],
        components: [row],
      });
      const collector = sentMessage.createMessageComponentCollector({
        componentType: ComponentType.Button,
        time: 120000,
      });
      collector.on("collect", (i) => {
        if (i.user.id !== message.author.id) {
          return i.reply({ content: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡πÑ‡∏î‡πâ!", ephemeral: true });
        }
        if (i.customId === "prev") page = page > 0 ? page - 1 : totalPages - 1;
        if (i.customId === "next") page = (page + 1) % totalPages;
        i.update({ embeds: [generatePageEmbed(page)] });
      });
      collector.on("end", () => {
        sentMessage.edit({ components: [] });
      });
    }
    return;
  }
});

client.on(Events.InteractionCreate, async (interaction) => {
  if (interaction.type !== InteractionType.MessageComponent) return;
  if (!interaction.customId.startsWith("collect_")) return;

  const userId = interaction.user.id;
  const now = Date.now();
  const lastTake = takeCooldown.get(userId) || 0;

  if (now - lastTake < 5 * 60 * 1000) {
    return;
  }

  takeCooldown.set(userId, now);
  const ShortsUrl = interaction.customId.replace("collect_", "");

  await interaction.deferUpdate().catch(() => {});

  if (!db) return;

  const exists = await db.get(
    "SELECT 1 FROM collections WHERE userId = ? AND ShortsUrl = ?",
    userId,
    ShortsUrl
  );

  if (exists) return;

  const ShortsTitle = interaction.message.content.split("\n")[0] || ShortsUrl;

  // ‡∏î‡∏∂‡∏á uid ‡∏à‡∏≤‡∏Å ShortsUrl ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á /shorts/
  let uid = ShortsUrl;
  const shortsMatch = ShortsUrl.match(/\/shorts\/([\w-]+)/);
  if (shortsMatch) {
    uid = shortsMatch[1];
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï username ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å collection ‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ ‡∏ñ‡πâ‡∏≤ username ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  if (db) {
    await db.run(
      "UPDATE collections SET username = ? WHERE userId = ?",
      interaction.user.username,
      interaction.user.id
    );
  }
  await db.run(
    "INSERT OR IGNORE INTO collections (userId, ShortsUrl, ShortsTitle, username, uid) VALUES (?, ?, ?, ?, ?)",
    userId,
    ShortsUrl,
    ShortsTitle,
    interaction.user.username,
    uid // ‡πÄ‡∏Å‡πá‡∏ö uid ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏•‡∏±‡∏á /shorts/
  );

  await interaction.message
    .edit({
      content: `${interaction.message.content}\n\n<@${userId}> ‡∏™‡∏∞‡∏™‡∏° Shorts ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß! ‚ùå`,
      components: [],
    })
    .catch(() => {});
});

client.login(process.env.DISCORD_BOT_TOKEN);
